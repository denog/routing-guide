{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DENOG Routing Guide","text":"<p>This guide is intended to act as a reference for best practices in Internet backbone routing. Its goal is to make the Internet more stable, secure and sustainable by educating both new and experienced network engineers. </p> <p>Disclaimer</p> <p>We expressly point out that the user is responsible for the configuration of his network and its components. This document is intended only as a recommendation and does not claim to be complete and correct.</p> <p>Wir weisen ausdr\u00fccklich darauf hin, dass der Benutzer f\u00fcr die Konfiguration seines Netzwerks und seiner Komponenten verantwortlich ist. Dieses Dokument ist nur als Empfehlung gedacht und erhebt keinen Anspruch auf Vollst\u00e4ndigkeit und Richtigkeit.</p>"},{"location":"#working-group","title":"Working Group","text":"<p>This guide is edited by the DENOG Routing Working Group. You don't need to be a member of the working group to contribute to the project.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>You can contribute to this routing guide on github.com/denog/routing-guide/ using GitHubs issues or pull request features. We have a Code of Conduct as a common ground for collaboration.</p>"},{"location":"#pages-which-need-editing","title":"Pages which need editing","text":"<p>The following pages are missing configuration examples or text:</p>"},{"location":"#tag:arista-missing","title":"Arista missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:cisco-ios-xr-missing","title":"Cisco IOS XR missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:frr-missing","title":"FRR missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:huawei-vrp-missing","title":"Huawei VRP missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:junos-missing","title":"Junos missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:mikrotik-missing","title":"Mikrotik missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:nokia-sr-os-missing","title":"Nokia SR OS missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:openbgpd-missing","title":"OpenBGPD missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"#tag:vyos-missing","title":"VyOS missing","text":"<ul> <li>            Default Route          </li> </ul>"},{"location":"contribution/","title":"DENOG Contributions","text":"<p>Here we document various things</p> <ul> <li>Contribution guide (Credits, Maintainer and sources)<ul> <li>Issue forms</li> <li>pull request template</li> <li>How to git</li> <li>How to GitHub</li> <li>Other sources (like NLNOG BGP Guide)</li> <li>Maintainer</li> <li>Credits to WG Runners</li> </ul> </li> </ul>"},{"location":"contribution/example-networks/","title":"Example networks for documentation","text":""},{"location":"contribution/example-networks/#background","title":"Background","text":"<p>When writing documents you often need networks or IP addresses for examples. This page lists the networks which are explicitly mentioned in Internet Standards for this purpose.</p>"},{"location":"contribution/example-networks/#ipv4-example-networks","title":"IPv4 Example Networks","text":""},{"location":"contribution/example-networks/#source-rfc5737","title":"Source: RFC5737","text":"<p>The following networks are fully routable /24 networks (256 addresses), but set aside for documentation purposes:</p> <ul> <li>192.0.2.0/24</li> <li>198.51.100.0/24</li> <li>203.0.113.0/24</li> </ul>"},{"location":"contribution/example-networks/#source-rfc1918","title":"Source: RFC1918","text":"<p>The following networks are so-called private networks, they cannot be routed in the global BGP table but can be freely used in private networks:</p> <ul> <li>10.0.0.0/8 (10.0.0.0 - 10.255.255.255)</li> <li>172.16.0.0/12 (172.16.0.0 - 172.31.255.255)</li> <li>192.168.0.0/16 (192.168.0.0 - 192.168.255.255)</li> </ul>"},{"location":"contribution/example-networks/#ipv6-example-networks","title":"IPv6 Example Networks","text":""},{"location":"contribution/example-networks/#sources-rfc3849-and-rfc9637","title":"Sources: RFC3849 and RFC9637","text":"<p>The following network blocks are fully routable, but set aside for documentation purposes:</p> <ul> <li>2001:db8::/32</li> <li>3fff::/20</li> </ul>"},{"location":"contribution/example-networks/#autonomous-system-numbers","title":"Autonomous System Numbers","text":""},{"location":"contribution/example-networks/#source-rfc5398","title":"Source: RFC5398","text":"<p>The following AS numbers are set aside for documentation purposes:</p> <ul> <li>16-Bit numbers: 64496 - 64511</li> <li>32-Bit numbers: 65536 - 65551</li> </ul>"},{"location":"contribution/example-networks/#source-rfc6996","title":"Source: RFC6996","text":"<p>The following AS numbers are reserved for private use:</p> <ul> <li>16-Bit numbers: 64512 - 65534</li> <li>32-Bit numbers: 4200000000 - 4294967294</li> </ul>"},{"location":"contribution/example-networks/#domain-names","title":"Domain Names","text":""},{"location":"contribution/example-networks/#source-rfc2606","title":"Source: RFC2606","text":"<p>The following domain names can be used for documentation:</p> <ul> <li>\".example\" (Top-Level Domain)</li> <li>\"example.com\"</li> <li>\"example.net\"</li> <li>\"example.org\"</li> </ul>"},{"location":"contribution/formatting/","title":"Formatting","text":"<p>Pages are formatted using MkDocs Markdown</p> <p>We use some markdown extensions to structure our content.</p>"},{"location":"contribution/formatting/#tabs","title":"Tabs","text":"<pre><code>=== \"Tab 1\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n=== \"Tab 1\"\n\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco.\n</code></pre> Tab 1Tab 1 <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco.</p>"},{"location":"contribution/formatting/#notewarning","title":"Note/Warning","text":"<p>Note</p> <p>This is a note</p> <pre><code>!!! note\n    This is a note\n</code></pre> <p>Warning</p> <p>This is a warning</p> <pre><code>!!! warning\n    This is a warning\n</code></pre>"},{"location":"contribution/formatting/#feature-matrix","title":"Feature Matrix","text":"RPKI JunOS :material-check: Cisco IOS-XR :material-check: Arista EOS :material-close:"},{"location":"contribution/formatting/#diagrams","title":"Diagrams","text":"<p>Diagrams use Mermaid syntax</p> <pre><code>graph LR\n  OpenConfirm --&gt; OpenConfirm;\n  OpenConfirm --&gt; Established;\n  OpenConfirm --&gt; OpenSent;\n  OpenConfirm --&gt; Idle;\n  Established --&gt; Established;\n  Established --&gt; Idle;\n  OpenSent --&gt; Idle;\n  OpenSent &lt;--&gt; Active;\n  Active --&gt; Active;\n  Active &lt;--&gt; Connect;\n  Active --&gt; Idle;\n  Connect --&gt; OpenSent;\n  Connect &lt;--&gt; Idle;\n  Connect --&gt; Connect;\n  Idle --&gt; Idle;</code></pre> <pre><code> ``` mermaid\n graph LR\n   A[Start] --&gt; B{Error?};\n   B --&gt;|Yes| C[Hmm...];\n   C --&gt; D[Debug];\n   D --&gt; B;\n   B ----&gt;|No| E[Yay!];\n ```\n</code></pre>"},{"location":"contribution/formatting/#footnotes","title":"Footnotes","text":"<p>Lorem Ipsum<sup>1</sup></p> <pre><code>[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/","title":"DENOG Routing Guides","text":"<p>Here we want to create guides for specific areas of interest within the routing realm. Each guide should have a distinct scope and should be focused on that area. More to come.</p>"},{"location":"guides/control_plane_protection/","title":"Motivation","text":""},{"location":"guides/control_plane_protection/protect_your_bgp_session/","title":"Protect your BGP session","text":""},{"location":"guides/control_plane_protection/protect_your_bgp_session/#motivation","title":"Motivation","text":"<p>The idea of these measures is to protect your TCP-based BGP sessions against attacks. Keep in mind, these TCP sessions are long-living (speaking of weeks and months), so an attacker can take its time to try to destroy a BGP session by sending crafted packets.</p>"},{"location":"guides/control_plane_protection/protect_your_bgp_session/#authentication","title":"Authentication","text":""},{"location":"guides/control_plane_protection/protect_your_bgp_session/#md5-session-password","title":"MD5 session password","text":"<p>The easiest countermeasure against TCP based attacks on BGP sessions is to use  MD5 protection as described in RFC2385. When implementing this, keep in mind to also implement some key (password) handling procedures (just imagine your router has to be replaced and you have to re-create all eBGP configurations).</p> <p>Example for setting an MD5 password:</p> Cisco IOS / FRRoutingMikrotikJuniper <pre><code>router bgp 64500\n...\nneighbor 198.51.100.1 password mysecretpassword\n</code></pre> <pre><code>add name=AS64496 remote-as=64496 \\\n    remote-address=198.51.100.1 tcp-md5-key=mysecretpassword\n</code></pre> <pre><code>set protocols bgp group &lt;GROUPNAME&gt; neighbor 198.51.100.1 authentication-key \"mysecretpassword\"\n</code></pre>"},{"location":"guides/control_plane_protection/protect_your_bgp_session/#keyring","title":"Keyring","text":"<p>Another method is to use keyrings or key-chains. A common problem is that replacing a password in a protected session leads to a restart of the whole session. Using keyrings or key-chains addresses this problem in a way that a key (or password) is valid until a new password with a defined start-time is specified. This new key will be negiotiated upfront and becomes active at the start-time.</p> Juniper <pre><code>set security authentication-key-chains key-chain &lt;KEY-CHAIN-NAME&gt; description \"key chain for BGP\"\nset security authentication-key-chains key-chain &lt;KEY-CHAIN-NAME&gt; key 1 secret mysecretpassword\nset security authentication-key-chains key-chain &lt;KEY-CHAIN-NAME&gt; key 1 start-time \"2025-01-01.09:00:00 +0200\"\n\nset protocols bgp group &lt;GROUPNAME&gt; authentication-algorithm hmac-sha-1-96\nset protocols bgp group &lt;GROUPNAME&gt; authentication-key-chain &lt;KEY-CHAIN-NAME&gt;\n</code></pre>"},{"location":"guides/control_plane_protection/protect_your_bgp_session/#tcp-authentication-option","title":"TCP Authentication Option","text":"<p>MD5, which is widely used, is considered to be insecure and deprecated. To replace it, RFC5925 defines a mechanism called TCP Authentication Option, please read the RFC for details. In short, it uses stronger codes to protect your session.</p> <p>Unfortunately this is not widely implemented.</p>"},{"location":"guides/control_plane_protection/protect_your_bgp_session/#ttl-security","title":"TTL Security","text":"<p>Instead of using a password, relying on the TTL value of incoming TCP packets is easier to handle and to implement.</p> <p>RFC5082 describes, how setting the TTL value of packets when sending to 255, and checking that value when receiving, makes it an impossible-to-spoof security measure.</p> <p>As the TTL is decreased by every hop, when you receive a packet with TTL 255, it must have been sent by a directly adjacent node.</p> <p>This feature must be set on both ends to work - if you set it on one end only, one side sends IP packets with a TTL of 1, and the other with a TTL of 255, and a session cannot be established.</p> <p>Configuration examples:</p> Cisco IOS classic / IOS XE / FRRoutingCisco IOS XRMikrotikJuniper <p>On Cisco IOS or FRRouting you configure how many hops your neighbor is away: <pre><code>router bgp 64500\n...\nneighbor 198.51.100.1 ttl-security hops 1\n</code></pre></p> <p>On Cisco IOS XR you just configure ttl-security without an hop parameter: <pre><code>router bgp 64500\n...\nneighbor 198.51.100.1 ttl-security\n</code></pre></p> <p>On Mikrotik, you do not configure how many maximum hops a peer can be away, but the TTL value, which is 255 for directly adjacent peers (this is also the default value): <pre><code>add in-filter=upstream-in name=AS64496 out-filter=upstream-out \\\n    remote-address=198.51.100.1 remote-as=64496 ttl=255\n</code></pre></p> <p>On Junos you configure how many hops your neighbors in a group are away: <pre><code>set protocols bgp group &lt;GROUPNAME&gt; ttl 255\n</code></pre> On Junos you configure how many hops a specific neighbor in a group is away: <pre><code>set protocols bgp group &lt;GROUPNAME&gt; neighbor 198.51.100.1 ttl 255\n</code></pre></p>"},{"location":"guides/forwarding_filter/","title":"Motivation","text":""},{"location":"guides/route_filtering/inbound/","title":"Motivation","text":"<p>A raw BGP full feed (the so-called \"global routing table\") contains a lot of junk you do not want in your routers. In the best case, it contains prefixes to non-routable networks; in the worst case, it can break your internal routing.</p> <p>There are a number of measures to filter a full BGP feed which will be explained in the following sections.</p> <p>In general, we have three sources of information to fill your BGP table:</p> <ul> <li>the raw input you receive from your peers</li> <li>one or more block lists where you define what you not want from that specific peer or from all peers</li> <li>an allow list or whitelist, where you define what you allow from that peer</li> </ul> <p>Job Snijders defined that at RIPE77 as intersecting sets.</p> <p></p>"},{"location":"guides/route_filtering/inbound/as_path_length/","title":"AS PATH Length","text":""},{"location":"guides/route_filtering/inbound/as_path_length/#purpose","title":"Purpose","text":"<p>The AS PATH in the DFZ can become very long. At some point this can become an issue (with some Vendors/OSes). It should be considered to limit the maximum length of the AS PATH. </p>"},{"location":"guides/route_filtering/inbound/as_path_length/#description","title":"Description","text":""},{"location":"guides/route_filtering/inbound/as_path_length/#configuration","title":"Configuration","text":"Cisco IOSCisco IOS XRJuniper JunosBird2FRRoutingNokia SR OS classic CLI <pre><code>router bgp 64500\n bgp maxas-limit 50\n</code></pre> <pre><code>route-policy AS-PATH-WAY-TOO-LONG\n if as-path length ge 50 then\n  drop\n endif\nend-policy\nrouter bgp 64500\n neighor 198.51.100.1\n  address-family ipv4 unicast\n   route-policy AS-PATH-WAY-TOO-LONG in\n neighor 2001:db8::1\n  address-family ipv6 unicast\n   route-policy AS-PATH-WAY-TOO-LONG in\n  exit\n exit\nexit\n</code></pre> <pre><code>[edit policy-options]\n    as-path AS-PATH-MAX-LENGTH \".{50,}\";\n\n[edit policy-options policy-statement 4-BASE-IN]\n    term AS-PATH-WAY-TOO-LONG {\n      from {\n        as-path AS-PATH-MAX-LENGTH;\n      } \n      then reject;\n    }\n</code></pre> <pre><code>function reject_long_aspaths()\n{\n  if ( bgp_path.len &gt; 50 ) then {\n    # optional logging:\n    # print \"Reject: Too long AS path: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfilter import_all {\n  reject_long_aspaths();\n  ...\n  accept;\n}\n</code></pre> <p>FRRouting does not allow to limit the number of ASes in the path.</p> <pre><code>/configure router \"Base\" policy-options\nbegin\n        policy-statement \"inbound\"\n            description \"inbound peering policy\"\n            [...]\n            entry 25\n                from\n                    as-path-length 100 or-higher\n                exit\n                action drop\n                exit\n            exit\n            [...]\n        exit\ncommit\n</code></pre>"},{"location":"guides/route_filtering/inbound/bogon_asn/","title":"Bogon AS","text":""},{"location":"guides/route_filtering/inbound/bogon_asn/#purpose","title":"Purpose","text":"<p>Bogon AS are autonomous systems which are used for test or demo applications. These AS may not be used on the public Internet.</p>"},{"location":"guides/route_filtering/inbound/bogon_asn/#description","title":"Description","text":""},{"location":"guides/route_filtering/inbound/bogon_asn/#configuration","title":"Configuration","text":"Cisco IOS XRBird2FRRoutingNokia SR OS classic CLI <pre><code>as-path-set bogon-asns\n   # RFC7607\n   ios-regex '_0_',\n   # 2 to 4 byte ASN migrations\n   passes-through '23456',\n   # RFC5398\n   passes-through '[64496..64511]',\n   passes-through '[65536..65551]',\n   # RFC6996\n   passes-through '[64512..65534]',\n   passes-through '[4200000000..4294967294]',\n   # RFC7300\n   passes-through '65535',\n   passes-through '4294967295',\n   # IANA reserved\n   passes-through '[65552..131071]'\nend-set\n\nroute-policy import_from_ebgp\n    if as-path in bogon-asns then\n        drop\n    else\n        pass\n    endif\nend-policy\n</code></pre> <pre><code>define BOGON_ASNS = [\n  0,                      # RFC 7607\n  23456,                  # RFC 4893 AS_TRANS\n  64496..64511,           # RFC 5398 and documentation/example ASNs\n  64512..65534,           # RFC 6996 Private ASNs\n  65535,                  # RFC 7300 Last 16 bit ASN\n  65536..65551,           # RFC 5398 and documentation/example ASNs\n  65552..131071,          # RFC IANA reserved ASNs\n  4200000000..4294967294, # RFC 6996 Private ASNs\n  4294967295              # RFC 7300 Last 32 bit ASN\n];\nfunction reject_bogon_asns()\nint set bogon_asns;\n{\n  bogon_asns = BOGON_ASNS;\n  if ( bgp_path ~ bogon_asns ) then {\n    # optional logging:\n    # print \"Reject: bogon AS_PATH: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfilter import_all {\n  reject_bogon_asns();\n  ...\n  accept;\n}\n</code></pre> <p>FRRouting uses regular expressions only for AS-path access-lists. The following list was compiled using a numeric range to regex converter: <pre><code>bgp as-path access-list bogon-asns permit _0_\nbgp as-path access-list bogon-asns permit _23456_\nbgp as-path access-list bogon-asns permit _(6449[6-9]|64[5-9][0-9]{2}|6[5-9][0-9]{3})_\nbgp as-path access-list bogon-asns permit _(7000[0-9]|700[1-9][0-9]|70[1-9][0-9]{2}|7[1-9][0-9]{3}|[89][0-9]{4}|1[0-2][0-9]{4}|130[0-9]{3}|1310[0-6][0-9]|13107[01])_\nbgp as-path access-list bogon-asns permit _(420000000[0-9]|42000000[1-9][0-9]|4200000[1-9][0-9]{2}|420000[1-9][0-9]{3}|42000[1-9][0-9]{4}|4200[1-9][0-9]{5}|420[1-9][0-9]{6}|42[1-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[01][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])_\n\nroute-map import-all deny 100\n  match as-path bogon-asns\n</code></pre></p> <pre><code>/configure router \"Base\" policy-options\nbegin\n       as-path-group \"bogon-asns\"\n            entry 10 expression \".* 23456 .*\"\n            entry 15 expression \".* [64496-64511] .*\"\n            entry 20 expression \".* [65536-65551] .*\"\n            entry 25 expression \".* [64512-65534] .*\"\n            entry 30 expression \".* [4200000000-4294967294] .*\"\n            entry 35 expression \".* 65535 .*\"\n            entry 40 expression \".* 4294967295 .*\"\n            entry 45 expression \".* [65552-131071] .*\"\n        exit\n        policy-statement \"inbound\"\n            description \"inbound peering policy\"\n            [...]\n            entry 10\n                from\n                    as-path-group \"bogon-asns\"\n                exit\n                action drop\n                exit\n            exit\n            [...]\n        exit\ncommit\n</code></pre>"},{"location":"guides/route_filtering/inbound/bogon_prefixes/","title":"Bogon Prefixes","text":"<p>\"Bogon\" prefixes are non-routeable or reserved prefixes which should never be seen in the global routing table.</p>"},{"location":"guides/route_filtering/inbound/bogon_prefixes/#ipv4","title":"IPv4","text":"<p>When IPv4 was created, the inventors reserved certain part of the address space for specific purposes. These were the times of class-A,B,C networks (if anybody still mentions them - the concept was abolished in 1993 in some RFCs starting with  RFC1517).</p> <p>The following IPv4 space is still considered to be not routable and should never be announced via BGP:</p> <ul> <li>Private IPv4 space as defined in RFC1918. Networks 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16 are reserved for private use and should never be announced.</li> <li>IPv4 networks reserved for documentation purposes defined in RFC5737. These three networks are reserved and should not be routed (but you might see them in this document as example networks).</li> <li>Reserved for multicast: The address block 224.0.0.0/4 was reserved for multicast and cannot be used for anything else. Do not accept announcements out of it via BGP.</li> <li>So-called Class-E: The network block 240.0.0.0/4 was always reserved \"for future use\" which never came. Today this range is considered to be not usable and therefore should not be accepted via BGP.</li> <li>More can be found at this IANA website. Everything with \"Globally Reachable False\" should be filtered out.</li> </ul>"},{"location":"guides/route_filtering/inbound/bogon_prefixes/#ipv6","title":"IPv6","text":"<p>In IPv6, there is a similar list at IANA. However, for IPv6 it is easier to positive-filter for 2000::/3, as this is the only block where currently unicast address assignments were made from. Currently. You might check frequently if other blocks have been added. It is strongly recommended that you automate this task.</p>"},{"location":"guides/route_filtering/inbound/bogon_prefixes/#configuration-examples","title":"Configuration Examples","text":"Cisco IOS / FRRoutingCisco IOS XRMikrotikBird2Nokia SR OS classic CLI <p>For IPv4, you can simply add all unwanted prefixes to the list we defined in the previous section: <pre><code>ip prefix-list ipv4-unwanted permit 192.168.0.0/16 le 32\nip prefix-list ipv4-unwanted permit 172.16.0.0/12 le 32\nip prefix-list ipv4-unwanted permit 10.0.0.0/8 le 32\n...\n</code></pre></p> <p>For IPv4, you can simply add all unwanted prefixes to the list: <pre><code>prefix-set bogon-ipv4\n  # RFC 1122 'this' Network\n  0.0.0.0/8 le 32,\n  # RFC 1918 Private\n  10.0.0.0/8 le 32,\n  # RFC 6598 Carrier grade nat space\n  100.64.0.0/10 le 32,\n  # RFC 1122 Loopback\n  127.0.0.0/8 le 32,\n  # RFC 3927 Link Local\n  169.254.0.0/16 le 32,\n  # RFC 1918 Private\n  172.16.0.0/12 le 32,\n  # RFC 6890 Protocol Assignments\n  192.0.0.0/24 le 32,\n  # RFC 5737 Documentation TEST-NET-1\n  192.0.2.0/24 le 32,\n  # RFC 7526 6to4 anycast relay\n  192.88.99.0/24 le 32,\n  # RFC 1918 Private\n  192.168.0.0/16 le 32,\n  # RFC 2544 Benchmarking\n  198.18.0.0/15 le 32,\n  # RFC 5737 Documentation TEST-NET-2\n  198.51.100.0/24 le 32,\n  # RFC 5737 Documentation TEST-NET-3\n  203.0.113.0/24 le 32,\n  # RFC 5771 Multicast\n  224.0.0.0/4 le 32,\n  # RFC 1112 Reserved\n  240.0.0.0/4 le 32\nend-set\n\nprefix-set bogon-ipv6\n  #IETF reserved\n  ::/8 le 128,\n  # RFC6666 Discard-Only Address Block\n  100::/64 le 128,\n  # RFC4380,RFC8190 TEREDO\n  2001::/32 le 128,\n  # RFC5180 Benchmarking\n  2001:2::/48 le 128,\n  # RFC7450 Documentation\n  2001:db8::/32 le 128,\n  # RFC3056 6to4\n  2002::/16 le 128,\n  # RFC9637 Documentation Space\n  3fff::/20 le 128,\n  # RFC4193,RFC8190 Unique-Local\n  fc00::/7 le 128,\n  # RFC4291 Link-Local Unicast\n  fe80::/10 le 128\nend-set\n\nroute-policy reject-bogons-ipv4-networks\n  if destination in bogon-ipv4 then\n    drop\n  endif\nend-policy\nroute-policy reject-bogons-ipv6-networks\n  if destination in bogon-ipv6 then\n    drop\n  endif\nend-policy\n...\n</code></pre></p> <p>You can add this to your existing filter or you can create a sub-filter for better readability: <pre><code>/routing filter\nadd action=reject chain=ipv4-unwanted prefix=192.168.0.0/16 prefix-length=16-32\nadd action=reject chain=ipv4-unwanted prefix=172.16.0.0/12 prefix-length=12-32\nadd action=reject chain=ipv4-unwanted prefix=10.0.0.0/8 prefix-length=8-32\n...\n</code></pre></p> <pre><code>define BOGON_PREFIXES4 = [\n  0.0.0.0/8+,         # RFC 1122 'this' Network\n  10.0.0.0/8+,        # RFC 1918 Private\n  100.64.0.0/10+,     # RFC 6598 Carrier grade nat space\n  127.0.0.0/8+,       # RFC 1122 Loopback\n  169.254.0.0/16+,    # RFC 3927 Link Local\n  172.16.0.0/12+,     # RFC 1918 Private\n  192.0.2.0/24+,      # RFC 5737 Documentation TEST-NET-1\n  192.168.0.0/16+,    # RFC 1918 Private\n  198.18.0.0/15+,     # RFC 2544 Benchmarking\n  198.51.100.0/24+,   # RFC 5737 Documentation TEST-NET-2\n  203.0.113.0/24+,    # RFC 5737 Documentation TEST-NET-3\n  224.0.0.0/4+,       # RFC 5771 Multicast\n  240.0.0.0/4+        # RFC 1112 Reserved\n];\ndefine BOGON_PREFIXES6 = [\n    ::/8+,           # RFC4291 Loopback and more\n    0100::/64+,      # RFC6666 Discard-Only Address Block\n    2001:2::/48+,    # RFC5180 Benchmarking\n    2001:10::/28+    # RFC4843 ORCHID\n    2001:db8::/32+,  # RFC7450 Documentation\n    3ffe::/16+,      # RFC3701 old 6bone\n    3fff::/20+,      # RFC9637 Documentation\n    5f00::/16+,      # RFC9602 SRv6 SIDs\n    fc00::/7+,       # RFC4193,RFC8190 Unique-Local\n    fe80::/10+       # RFC4291 Link-Local Unicast\n    fec0::/10+       # RFC3879 old Site-Local Unicast\n    ff00::/8+        # RFC4291 Multicast\n];\nfunction reject_bogon_prefixes4()\nprefix set bogon_prefixes4;\n{\n  bogon_prefixes4 = BOGON_PREFIXES4;\n  if (net ~ bogon_prefixes4) then {\n    # optional logging:\n    # print \"Reject: Bogon prefix: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfunction reject_bogon_prefixes6()\nprefix set bogon_prefixes6;\n{\n  bogon_prefixes6 = BOGON_PREFIXES6;\n  if (net ~ bogon_prefixes6) then {\n    # optional logging:\n    # print \"Reject: Bogon prefix: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfilter import_ipv4 {\n  reject_bogon_prefixes4();\n  ...\n  accept;\n}\nfilter import_ipv6 {\n  reject_bogon_prefixes6();\n  ...\n  accept;\n}\n</code></pre> <pre><code>/configure router \"Base\" policy-options\nbegin\n        prefix-list \"v4-bogons\"\n            prefix 0.0.0.0/8 longer\n            prefix 10.0.0.0/8 longer\n            prefix 100.64.0.0/10 longer\n            prefix 127.0.0.0/8 longer\n            prefix 169.254.0.0/16 longer\n            prefix 172.16.0.0/12 longer\n            prefix 192.0.0.0/24 longer\n            prefix 192.0.2.0/24 longer\n            prefix 192.168.0.0/16 longer\n            prefix 198.18.0.0/15 longer\n            prefix 198.51.100.0/24 longer\n            prefix 203.0.113.0/24 longer\n            prefix 224.0.0.0/4 longer\n            prefix 240.0.0.0/4 longer\n        exit\n        prefix-list \"v6-bogons\"\n            prefix ::/8 longer\n            prefix 100::/64 longer\n            prefix 2001:2::/48 longer\n            prefix 2001:10::/28 longer\n            prefix 2001:db8::/32 longer\n            prefix 3ffe::/16 longer\n            prefix 3fff::/20 longer\n            prefix 5f00::/16 longer\n            prefix fc00::/7 longer\n            prefix fe80::/10 longer\n            prefix fec0::/10 longer\n            prefix ff00::/8 longer\n        exit\n        policy-statement \"inbound\"\n            description \"inbound peering policy\"\n            [...]\n            entry 30\n                from\n                    prefix-list \"v4-bogons\"\n                exit\n                action drop\n                exit\n            exit\n            entry 40\n                from\n                    prefix-list \"v6-bogons\"\n                exit\n                action drop\n                exit\n            exit\n            [...]\n        exit\ncommit\n</code></pre>"},{"location":"guides/route_filtering/inbound/default_route/","title":"Default Route","text":"","tags":["Arista missing","Cisco IOS XR missing","FRR missing","Huawei VRP missing","Junos missing","Mikrotik missing","Nokia SR OS missing","OpenBGPD missing","VyOS missing"]},{"location":"guides/route_filtering/inbound/default_route/#purpose","title":"Purpose","text":"<p>Per definition a default route means \"route all packets this way unless there is a specific route for the destination IP address\". A default route is expressed in IPv4 as 0.0.0.0/0 and as ::/0 in IPv6.</p> <p>It is completely legitimate if a transit provider announces default routes to their customers. In case the customers router has limited memory for the routing table, it can simply only accept the default route, blocking all other more specific routes.</p> <p>On the other hand, if you want the full routing table, you should not accept any default route from your transit providers. You must never accept a default route from any non-transit-provider neighbor.</p>","tags":["Arista missing","Cisco IOS XR missing","FRR missing","Huawei VRP missing","Junos missing","Mikrotik missing","Nokia SR OS missing","OpenBGPD missing","VyOS missing"]},{"location":"guides/route_filtering/inbound/default_route/#configuration","title":"Configuration","text":"Cisco IOS / FRRoutingCisco IOS XRBird2 <pre><code>ip prefix-list default-route-v4 permit 0.0.0.0/0\nipv6 prefix-list default-route-v6 permit ::/0\n</code></pre> <p>Route-Map statement for allowing only default routes in: <pre><code>route-map prefixes-in permit 10\n  match ip address prefix-list default-route-v4\n  match ipv6 address prefix-list default-route-v6\n</code></pre></p> <p>Route-Map statement for not allowing default routes in: ``` route-map prefixes-in deny 10   match ip address prefix-list default-route-v4   match ipv6 address prefix-list default-route-v6 ````</p> <p>Build prefix lists with default route entries <pre><code>prefix-set default-ipv4\n  0.0.0.0/0\nend-set\n\nprefix-set default-ipv6\n  ::/0\nend-set\n</code></pre></p> <p>Build filters with the default route lists to drop default route <pre><code>route-policy reject-default-ipv4\n  if destination in default-ipv4 then\n    drop\n  else\n    pass\n  endif\nend-policy\n\nroute-policy reject-default-ipv6\n  if destination in default-ipv6 then\n    drop\n  else\n    pass\n  endif\nend-policy\n</code></pre></p> <p>Build filters with the default route lists to allow default route <pre><code>route-policy accept-default-ipv4\n  if destination in default-ipv4 then\n    pass\n  else\n    drop\n  endif\nend-policy\n\nroute-policy accept-default-ipv6\n  if destination in default-ipv6 then\n    pass\n  else\n    drop\n  endif\nend-policy\n</code></pre></p> <pre><code>function reject_default_route4()\n{\n  if net = 0.0.0.0/0 then {\n    # optional logging:\n    # print \"Reject: Defaultroute: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfunction reject_default_route6()\n{\n  if net = ::/0 then {\n    # optional logging:\n    # print \"Reject: Defaultroute: \", net, \" \", bgp_path;\n    reject;\n  }\n}\nfilter import_ipv4 {\n  reject_default_route4();\n  ...\n  accept;\n}\nfilter import_ipv6 {\n  reject_default_route6();\n  ...\n  accept;\n}\n</code></pre>","tags":["Arista missing","Cisco IOS XR missing","FRR missing","Huawei VRP missing","Junos missing","Mikrotik missing","Nokia SR OS missing","OpenBGPD missing","VyOS missing"]},{"location":"guides/route_filtering/inbound/max_prefix/","title":"Maximum Prefix","text":"<p>This parameter is configured for each eBGP session and is the simplest and easiest security measure you can use. Unfortunately, many stop here. Please do not.</p> <p>Maximum prefix defines a limit for the number of prefixes you accept from an eBGP peer. If the peer sends more, the eBGP session is shut down. Usually, routers keep the session down for some time, then it is automatically re-enabled. If the peer still sends more prefixes than allowed, it is shut down again.</p> <p>For selecting this limit, the following rules of thumb can be used:</p> <ul> <li>For sessions to peers, the limit should be less than the total number of prefixes in the Internet. Set it at least to ten times the normal number of prefixes your peer announces. This protects you against your peer announcing the full routing table to you, but still allows normal growth. Check and adjust from time to time (or even better: Automate this).</li> <li>For sessions to your upstream provider, you must, of course, set the limit higher than the total number of prefixes in the Internet. It must be high enough to accommodate normal growth, so either set it very high or check and adjust it regularly. Otherwise, there can be surprising session shutdowns. This protects you against gross misconfigurations at your upstream provider (like sending you a lot of de-aggregated prefixes).</li> </ul> <p>If you want to automate this, at PeeringDB networks can publish suggested values for maximum prefix.</p> <p>Also, keep in mind that maximum prefix for IPv4 and IPv6 are two different values.</p> <p>Configuration examples:</p> Cisco IOSCisco IOS XRFRRoutingMikrotikBird2Nokia SR OS classic CLI <p>This shuts down the session when 1000 prefixes are received and issues a warning at 95% (950 prefixes): <pre><code>router bgp 64500\n...\nneighbor 198.51.100.1 maximum-prefix 1000 95\n</code></pre></p> <p>This shuts down the session when 1000 prefixes are received, issues a warning at 95% (950 prefixes) and restarts the session after 60 minutes: <pre><code>router bgp 64500\n    neighbor 198.51.100.1\n    address-family ipv4 unicast\n        maximum-prefix 1000 95 restart 60\n</code></pre></p> <p>This shuts down the session when 1000 prefixes are received, issues a warning at 95% (950 prefixes) and restarts the session after 60 minutes: <pre><code>router bgp 64500\n    address-family ipv4 unicast\n        neighbor 198.51.100.1 maximum-prefix 1000 95 restart 60\n</code></pre></p> <p>This shuts down your session when 1000 prefixes are received and restarts it after one hour: <pre><code>add name=AS64496 remote-as=64496 \\\n    remote-address=198.51.100.1 max-prefix-limig=1000 max-prefix-restart-time=1h\n</code></pre></p> <pre><code>protocol bgp neighbor_name {\n  ipv4 {\n     import limit 1000 restart;\n  }\n  ipv6 {\n     import limit 500 restart;\n  }\n}\n</code></pre> <pre><code>/configure router \"Base\" bgp\nbegin\n    bgp\n        group \"as64500\"\n            [...]\n            prefix-limit ipv4 1000\n            prefix-limit ipv6 500\n            [...]\n        exit\ncommit\n</code></pre>"},{"location":"guides/route_filtering/inbound/number_of_bgp_communities/","title":"Number of BGP communities","text":""},{"location":"guides/route_filtering/inbound/number_of_bgp_communities/#purpose","title":"Purpose","text":"<p>BGP Communities can give a lot of information about a prefix, for example where your BGP peer learned the prefix. As BGP Communities also consume router memory it is suggested to delete the BGP communities if too many of them are attached to a prefix.</p>"},{"location":"guides/route_filtering/inbound/number_of_bgp_communities/#configuration","title":"Configuration","text":"Cisco IOSCisco IOS XRJuniper JunOSArista EOS <p>In Cisco IOS it is not possible to only delete BGP Communities from a prefix when there are more than a specific number attached. You can filter prefixes with eg. &gt;=100 BGP Communities, but then your router won't have a route to the filtered prefix if you do not have a default route. <pre><code>router bgp 64500\n  bgp maxcommunity-limit 99\n  bgp maxextcommunity-limit 99\n</code></pre></p> <p>If you do not want to loose any routes because of too many attached BGP Communities you could also remove all BGP Communities from the prefixes coming from your peer. <pre><code>ip community-list expanded ALL-COMMUNITIES permit .*\n!\nroute-map BGP_FILTER_IN permit 100\n set comm-list ALL-COMMUNITIES delete\n set extcomm-list ALL-COMMUNITIES delete\n!\nrouter bgp 64500\n neighbor 198.51.100.1 route-map BGP_FILTER_IN in\n</code></pre></p> <p>In Cisco IOS XR it is not possible to only delete BGP Communities from a prefix when there are more than a specific number attached. You can filter prefixes with eg. &gt;=100 BGP Communities, but then your router won't have a route to the filtered prefix if you do not have a default route. <pre><code>router bgp 64500\n  bgp maxcommunity-limit 99\n  bgp maxextcommunity-limit 99\n</code></pre></p> <p>If you do not want to loose any routes because of too many attached BGP Communities you could also remove all BGP Communities from the prefixes coming from your peer. <pre><code>ip community-list expanded ALL-COMMUNITIES permit .*\n!\nroute-map BGP_FILTER_IN permit 100\n set comm-list ALL-COMMUNITIES delete\n set extcomm-list ALL-COMMUNITIES delete\n!\nrouter bgp 64500\n neighbor 198.51.100.1 route-map BGP_FILTER_IN in\n</code></pre></p> <p>In this example all BGP Communities are removed from a prefix when &gt;= 100 BGP Communities are attached. <pre><code>policy-options {\n    community ALL-COMMUNITIES members [ *:* origin:*:* large:*:*:* ];\n    policy-statement BGP_FILTER_IN {\n      term delete-too-many-communities {\n        from community-count 100 orhigher;\n        then {\n            community delete ALL-COMMUNITIES;\n        }\n    }\n}\n</code></pre></p> <p>In this example all BGP Communities are removed from a prefix when &gt;= 100 BGP Communities are attached. <pre><code>route-map BGP_FILTER_IN permit 100\n    match community instances &gt;= 100\n    set community none\n!\n</code></pre></p>"},{"location":"guides/route_filtering/inbound/prefix_length/","title":"Prefix length filtering","text":"<p>Normally (there are exceptions), prefixes are announced in certain minimum and maximum lengths in the global Internet routing table. Currently, they are:</p> <ul> <li>IPv4, minimum size is /24. No smaller networks should be announced. Possible exceptions: blackholing, or an announcement in combination with a NO-EXPORT community set, from a customer to his upstream.</li> <li>IPv6, minimum size is /48. Same exceptions as within IPv4.</li> <li>IPv4, maximum size is a /8. Larger networks are not announced. Depending on your set-up, you might want to accept the default-route 0.0.0.0/0 from your upstream providers.</li> <li>IPv6, maximum size is currently a /16 (please take this with a grain of salt, this number might already have changed). The remark about accepting a default-route ::0 is the same.</li> </ul> <p>Configuration examples:</p> Cisco IOSCisco IOS XRMikrotikBird2Nokia SR OS classic CLI <p>Using an unwanted prefix-list you can add  more prefixes to it that you not want. This shortens your configuration but might also decrease readability. <pre><code>ip prefix-list ipv4-unwanted permit 0.0.0.0/0 ge 25 le 32\nip prefix-list ipv4-unwanted permit 0.0.0.0/0 ge 1 le 7\n!\nroute-map upstream-in-v4 deny 50\n    match ip address prefix-list ipv4-unwanted\n!\nipv6 prefix-list ipv6-unwanted permit ::/0 ge 49 le 128\nipv6 prefix-list ipv6-unwanted permit ::/0 ge 0 le 16\n!\nroute-map upstream-in-v6 deny 45\n    match ipv6 address prefix-list ipv6-unwanted\n!\nrouter bgp 64500\n    neighbor 198.51.100.1 route-map upstream-in-v4 in\n    !\n    neighbor 2001:db8::1 route-map upstream-in-v6 in\n    !\n</code></pre></p> <p>Use an permitted list and you can still customize the range. Please note that these areas are common on the public internet. <pre><code># Define permitted IP prefixes\nprefix-set permitted-prefix-length-v4\n    # Bigger than /8 or smaller than /24\n    0.0.0.0/0 ge 8 le 24\nend-set\nprefix-set permitted-prefix-length-v6\n    # Bigger than /16 or smaller than /48\n    ::/0 ge 16 le 48\nend-set\n\n# If you want to implement it in separate filters, then like this policy:\nroute-policy filter-incorrect-prefixes-v4\n    if destionation in permitted-prefix-length-v4 then\n        pass\n    else\n        drop\n    endif\nend-policy\nroute-policy filter-incorrect-prefixes-v6\n    if destionation in permitted-prefix-length-v6 then\n        pass\n    else\n        drop\n    endif\nend-policy\n\n# If you want to implement it in one filter, then like this policy:\nroute-policy filter-incorrect-prefixes\n    if destionation in permitted-prefix-length-v4 or permitted-prefix-length-v6 then\n        pass\n    else\n        drop\n    endif\nend-policy\n</code></pre></p> <p>Mikrotik works with filter-lists, for easier readability you can use sub-filters (note this example only shows the filter lists itself): <pre><code>/routing filter\nadd action=jump chain=upstream-in-v4 jump-target=ipv4-size\n...\nadd action=reject chain=ipv4-size prefix-length=0-7\nadd action=reject chain=ipv4-size prefix-length=25-32\n</code></pre></p> <pre><code>function reject_small_prefixes4()\n{\n  if (net.len &gt; 24) then {\n    # allow blackhole\n    if (net.len != 32) then {\n      # optional logging:\n      # print \"Reject: Too small prefix: \", net, \" \", bgp_path;\n      reject;\n    }\n  }\n}\nfunction reject_small_prefixes6()\n{\n  if (net.len &gt; 64) then {\n    # allow blackhole\n    if (net.len != 128) then {\n      # optional logging:\n      # print \"Reject: Too small prefix: \", net, \" \", bgp_path;\n      reject;\n    }\n  }\n}\nfilter import_ipv4() {\n  reject_small_prefixes4();\n  ...\n  accept;\n}\nfilter import_ipv6() {\n  reject_small_prefixes6();\n  ...\n  accept;\n}\n</code></pre> <pre><code>/configure router \"Base\" policy-options\nbegin\n        prefix-list \"pfx-small-prefix-length\"\n            prefix 0.0.0.0/0 prefix-length-range 25-32\n            prefix ::/0 prefix-length-range 49-128\n        exit\n        policy-statement \"inbound\"\n            description \"inbound peering policy\"\n            [...]\n            entry 95\n                from\n                    prefix-list \"pfx-small-prefix-length\"\n                exit\n                action drop\n                exit\n            exit\n            [...]\n        exit\ncommit\n</code></pre>"},{"location":"guides/route_filtering/inbound/require_policy/","title":"Require policy to start a BGP session","text":"<p>Some routers accept configuration commands as you type them in line by line. At others you commit your configuration once you have completed it.</p> <p>Now, if you setup a BGP session to a neighbor and the router accepts it line by line, the session will be established once \"enough\" configuration is entered, independent if you have completed the configuration or not.</p> <p>So imagine you enter the neigbhbors AS number and IP address and then you go for a coffee. This might be enough to establish a session. Without any filtering, you now will receive everything from that neighbor and also announce every valid prefix in your own BGP tables. Most of the times, this is not what you want.</p> <p>RFC8212 requires that you must configure an import and an export policy (= some filtering) on any external BGP session, otherwise the session will not be initiated or accepted.</p> <p>The compliance of BGP implementations to RFC8212 is tracked here.</p> <p>Configuration examples:</p> Cisco IOS XRFRRouting <p>No configuration necessary, RFC8212 is supported by default.</p> <p>This is enabled by default for traditional configuration. <pre><code>router bgp 64500\n  bgp ebgp-requires-policy\n</code></pre></p>"},{"location":"guides/route_filtering/outbound/","title":"Motivation","text":"<p>When announcing prefixes to the public Internet you have to make sure to filter your announcements to your peers and transits. There are several best practices that are described separately in this chapter.</p> <p>The global BGP table is getting bigger and bigger every day. This needs more and more RAM on BGP routers in the DFZ. Please make sure to aggregate your prefixes as much as possible. It is sometimes useful to announce some more specific prefixes for traffic engineering purposes, but please limit the scope of more specifics if possible and do not announce more specifics that are not required.</p> <p>Please make sure to limit your announcements and do not be a transit provider between your peers and upstreams.</p>"},{"location":"guides/route_filtering/outbound/customer_prefix/","title":"Announce customer prefixes","text":""},{"location":"guides/route_filtering/outbound/customer_prefix/#purpose","title":"Purpose","text":"<p>If you do have BGP customers and need to provide IP transit to them you have to announce therr prefixes to your peers, upstreams and customers in addition to your own prefixes.</p> <p>Please make sure to filter the prefixes of your BGP customers directly on the BGP sessions to your customer as strict as possible. Allow your BGP customers to announce their own prefixes only. If your BGP customers also have other BGP customers you will have to accept their prefixes also. Tag the prefixes of your customers with your network specific informational BGP community and announce prefixes tagged with this BGP community to your external BGP peers.</p> <p>Note</p> <p>Explain/link how to build filters based on ASN or AS-Set.</p>"},{"location":"guides/route_filtering/outbound/customer_prefix/#configuration","title":"Configuration","text":"Juniper JunOSCisco IOS XRArista EOS <p>Config snippet for JunOS </p> <p>Config snippet for Cisco IOS XR </p> <p>Config snippet for Arista EOS </p>"},{"location":"guides/route_filtering/outbound/max_prefix/","title":"Maximum Prefix (Outbound)","text":"<p>This is a quite new feature of some BGP implementations. Here we do not protect our own network, we protect the our neighbors from us accidentally flooding too many IP prefixes towards them.</p> <p>Of course this also protects our own network, because if our neighbor accepted these prefixes and would send us all the traffic for them, we would drown in packets.</p> <p>Configuration examples:</p> FRRouting <p>This limits the number of prefixes sent to 1000, please note that the session is not shut down after the number is exceeded. Which prefixed are sent you cannot influence, this limits the usefulness of this feature. <pre><code>router bgp 64500\n    address-family ipv4 unicast\n        neighbor 198.51.100.1 maximum-prefix-out 1000\n</code></pre></p>"},{"location":"guides/route_filtering/outbound/own_prefix/","title":"Announce your own prefixes","text":""},{"location":"guides/route_filtering/outbound/own_prefix/#purpose","title":"Purpose","text":"<p>As a network participating in the global Internet you want to tell other networks about your own prefixes and announce them to the public Internet.</p> <p>Note</p> <p>You peers and upstreams might also apply incoming BGP filters to your BGP sessions and filter your prefixes. Please make sure to create appropriate RPKI objects, route/route6 objects and AS sets, for example in the RIPE datebase. It is best practice to also create an AS set although you currebtly only have one ASN, because if your BGP peers build filters based on your AS set you don't need to inform them if you ever announce prefixes with an additional origin ASN.</p>"},{"location":"guides/route_filtering/outbound/own_prefix/#configuration","title":"Configuration","text":"Juniper JunOSCisco IOSCisco IOS XRArista EOS <p>Config snippet for JunOS </p> <p>Please note that Cisco IOS is permissive by default. If you do not apply any filters, all prefixes will be shared between your BGP peers.</p> <p>Config snippet for Cisco IOS </p> <p>Config snippet for Cisco IOS XR </p> <p>Config snippet for Arista EOS </p>"},{"location":"working_group/","title":"DENOG Working Group Routing","text":"<p>Here we want to document our charter, org, communication and other important goals of our group</p>"}]}